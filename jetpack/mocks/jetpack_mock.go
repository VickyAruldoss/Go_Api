// Code generated by MockGen. DO NOT EDIT.
// Source: jetpack/jetpack.go

// Package mock_jetpack is a generated GoMock package.
package mock_jetpack

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockJetpack is a mock of Jetpack interface.
type MockJetpack struct {
	ctrl     *gomock.Controller
	recorder *MockJetpackMockRecorder
}

// MockJetpackMockRecorder is the mock recorder for MockJetpack.
type MockJetpackMockRecorder struct {
	mock *MockJetpack
}

// NewMockJetpack creates a new mock instance.
func NewMockJetpack(ctrl *gomock.Controller) *MockJetpack {
	mock := &MockJetpack{ctrl: ctrl}
	mock.recorder = &MockJetpackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJetpack) EXPECT() *MockJetpackMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockJetpack) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockJetpackMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockJetpack)(nil).Init))
}

// Print mocks base method.
func (m *MockJetpack) Print() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Print")
	ret0, _ := ret[0].(string)
	return ret0
}

// Print indicates an expected call of Print.
func (mr *MockJetpackMockRecorder) Print() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Print", reflect.TypeOf((*MockJetpack)(nil).Print))
}

// StartService mocks base method.
func (m *MockJetpack) StartService() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartService")
}

// StartService indicates an expected call of StartService.
func (mr *MockJetpackMockRecorder) StartService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartService", reflect.TypeOf((*MockJetpack)(nil).StartService))
}
